{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 10, "column": 0}, "map": {"version":3,"sources":["file:///D:/Sturdy/PersonalRepository/TiktokClone/admin-portal/src/components/ui/sonner.tsx"],"sourcesContent":["\"use client\";\r\n\r\nimport { useTheme } from \"next-themes\";\r\nimport { Toaster as Sonner, ToasterProps } from \"sonner\";\r\n\r\nconst Toaster = ({ ...props }: ToasterProps) => {\r\n  const { theme = \"system\" } = useTheme();\r\n\r\n  return (\r\n    <Sonner\r\n      theme={theme as ToasterProps[\"theme\"]}\r\n      className=\"toaster group\"\r\n      style={\r\n        {\r\n          \"--normal-bg\": \"var(--popover)\",\r\n          \"--normal-text\": \"var(--popover-foreground)\",\r\n          \"--normal-border\": \"var(--border)\",\r\n        } as React.CSSProperties\r\n      }\r\n      {...props}\r\n    />\r\n  );\r\n};\r\n\r\nexport { Toaster };\r\n"],"names":[],"mappings":";;;;;AAEA;AACA;AAHA;;;;AAKA,MAAM,UAAU,CAAC,EAAE,GAAG,OAAqB;IACzC,MAAM,EAAE,QAAQ,QAAQ,EAAE,GAAG,IAAA,4JAAQ;IAErC,qBACE,8OAAC,mJAAM;QACL,OAAO;QACP,WAAU;QACV,OACE;YACE,eAAe;YACf,iBAAiB;YACjB,mBAAmB;QACrB;QAED,GAAG,KAAK;;;;;;AAGf","debugId":null}},
    {"offset": {"line": 121, "column": 0}, "map": {"version":3,"sources":["file:///D:/Sturdy/PersonalRepository/TiktokClone/admin-portal/src/config/axios.tsx"],"sourcesContent":["import axios from \"axios\";\n\nconst API_BASE_URL =\n  process.env.NEXT_PUBLIC_BACKEND_API_URL || \"http://localhost:8082/api/v1\";\n\nconst apiClient = axios.create({\n  baseURL: API_BASE_URL,\n  timeout: 10000,\n  headers: {\n    \"Content-Type\": \"application/json\",\n  },\n});\n\n// Request interceptor to add auth token\napiClient.interceptors.request.use(\n  (config) => {\n    const token = localStorage.getItem(\"accessToken\");\n    if (token) {\n      config.headers.Authorization = `Bearer ${token}`;\n    }\n    return config;\n  },\n  (error) => {\n    return Promise.reject(error);\n  }\n);\n\n// Response interceptor to handle token refresh\napiClient.interceptors.response.use(\n  (response) => response,\n  async (error) => {\n    const originalRequest = error.config;\n\n    if (error.response?.status === 401 && !originalRequest._retry) {\n      originalRequest._retry = true;\n\n      try {\n        const currentToken = localStorage.getItem(\"accessToken\");\n        if (currentToken) {\n          console.log(\"Attempting to refresh token using current access token\");\n\n          const response = await axios.post(`${API_BASE_URL}/auth/refresh`, {\n            token: currentToken, // Use access token for refresh\n          });\n\n          if (response.data.code === 1000 && response.data.result) {\n            const { token: newAccessToken } = response.data.result;\n            localStorage.setItem(\"accessToken\", newAccessToken);\n\n            // Update the original request with new token\n            originalRequest.headers.Authorization = `Bearer ${newAccessToken}`;\n            return apiClient(originalRequest);\n          } else {\n            throw new Error(\"Refresh failed: Invalid response\");\n          }\n        } else {\n          // No token available, redirect to login\n          console.log(\"No access token available, redirecting to login\");\n          localStorage.removeItem(\"accessToken\");\n          localStorage.removeItem(\"refreshToken\");\n          window.location.href = \"/login\";\n        }\n      } catch (refreshError) {\n        console.error(\"Token refresh failed:\", refreshError);\n        localStorage.removeItem(\"accessToken\");\n        localStorage.removeItem(\"refreshToken\");\n        window.location.href = \"/login\";\n      }\n    }\n\n    return Promise.reject(error);\n  }\n);\n\nexport default apiClient;\n"],"names":[],"mappings":";;;;AAAA;;AAEA,MAAM,eACJ,oEAA2C;AAE7C,MAAM,YAAY,gJAAK,CAAC,MAAM,CAAC;IAC7B,SAAS;IACT,SAAS;IACT,SAAS;QACP,gBAAgB;IAClB;AACF;AAEA,wCAAwC;AACxC,UAAU,YAAY,CAAC,OAAO,CAAC,GAAG,CAChC,CAAC;IACC,MAAM,QAAQ,aAAa,OAAO,CAAC;IACnC,IAAI,OAAO;QACT,OAAO,OAAO,CAAC,aAAa,GAAG,CAAC,OAAO,EAAE,OAAO;IAClD;IACA,OAAO;AACT,GACA,CAAC;IACC,OAAO,QAAQ,MAAM,CAAC;AACxB;AAGF,+CAA+C;AAC/C,UAAU,YAAY,CAAC,QAAQ,CAAC,GAAG,CACjC,CAAC,WAAa,UACd,OAAO;IACL,MAAM,kBAAkB,MAAM,MAAM;IAEpC,IAAI,MAAM,QAAQ,EAAE,WAAW,OAAO,CAAC,gBAAgB,MAAM,EAAE;QAC7D,gBAAgB,MAAM,GAAG;QAEzB,IAAI;YACF,MAAM,eAAe,aAAa,OAAO,CAAC;YAC1C,IAAI,cAAc;gBAChB,QAAQ,GAAG,CAAC;gBAEZ,MAAM,WAAW,MAAM,gJAAK,CAAC,IAAI,CAAC,GAAG,aAAa,aAAa,CAAC,EAAE;oBAChE,OAAO;gBACT;gBAEA,IAAI,SAAS,IAAI,CAAC,IAAI,KAAK,QAAQ,SAAS,IAAI,CAAC,MAAM,EAAE;oBACvD,MAAM,EAAE,OAAO,cAAc,EAAE,GAAG,SAAS,IAAI,CAAC,MAAM;oBACtD,aAAa,OAAO,CAAC,eAAe;oBAEpC,6CAA6C;oBAC7C,gBAAgB,OAAO,CAAC,aAAa,GAAG,CAAC,OAAO,EAAE,gBAAgB;oBAClE,OAAO,UAAU;gBACnB,OAAO;oBACL,MAAM,IAAI,MAAM;gBAClB;YACF,OAAO;gBACL,wCAAwC;gBACxC,QAAQ,GAAG,CAAC;gBACZ,aAAa,UAAU,CAAC;gBACxB,aAAa,UAAU,CAAC;gBACxB,OAAO,QAAQ,CAAC,IAAI,GAAG;YACzB;QACF,EAAE,OAAO,cAAc;YACrB,QAAQ,KAAK,CAAC,yBAAyB;YACvC,aAAa,UAAU,CAAC;YACxB,aAAa,UAAU,CAAC;YACxB,OAAO,QAAQ,CAAC,IAAI,GAAG;QACzB;IACF;IAEA,OAAO,QAAQ,MAAM,CAAC;AACxB;uCAGa","debugId":null}},
    {"offset": {"line": 187, "column": 0}, "map": {"version":3,"sources":["file:///D:/Sturdy/PersonalRepository/TiktokClone/admin-portal/src/services/api.ts"],"sourcesContent":["import apiClient from \"@/config/axios\";\n\nexport interface ApiResponse<T> {\n  code: number;\n  message: string;\n  timeStamp: string;\n  result: T;\n}\n\nexport interface AuthenticateRequest {\n  username: string;\n  password: string;\n}\n\nexport interface AuthenticateResponse {\n  token: string;\n  expireAt: string;\n}\n\nexport interface RefreshResponse {\n  token: string;\n  expireAt: string;\n}\n\nexport interface IntrospectRequest {\n  token: string;\n}\n\nexport interface IntrospectResponse {\n  isValid: boolean;\n  userId: string;\n}\n\nexport interface UserResponse {\n  id: string;\n  username: string;\n  mail: string;\n  phoneNumber: string;\n  enable?: boolean;\n  roles: RoleResponse[];\n}\n\nexport interface RegisterRequest {\n  username: string;\n  mail: string;\n  phoneNumber: string;\n  password: string;\n}\n\nexport interface UserUpdateRequest {\n  username: string;\n  password?: string;\n  mail: string;\n  phoneNumber: string;\n  enable?: boolean;\n}\n\nexport interface RoleResponse {\n  id: string;\n  name: string;\n  description: string;\n}\n\nexport interface FileResponse {\n  id: string;\n  fileName: string;\n  fileType: string;\n  size: number;\n  url: string;\n  secureUrl: string;\n  format: string;\n  width: number;\n  height: number;\n  etag: string;\n}\n\nexport interface PagedResponse<T> {\n  content: T[];\n  pageable: {\n    pageNumber: number;\n    pageSize: number;\n    sort: {\n      empty: boolean;\n      sorted: boolean;\n      unsorted: boolean;\n    };\n    offset: number;\n    paged: boolean;\n    unpaged: boolean;\n  };\n  last: boolean;\n  totalElements: number;\n  totalPages: number;\n  size: number;\n  number: number;\n  sort: {\n    empty: boolean;\n    sorted: boolean;\n    unsorted: boolean;\n  };\n  first: boolean;\n  numberOfElements: number;\n  empty: boolean;\n}\n\nclass AuthService {\n  async authenticate(\n    request: AuthenticateRequest\n  ): Promise<ApiResponse<AuthenticateResponse>> {\n    const response = await apiClient.post(\"/auth/token\", request);\n    return response.data;\n  }\n\n  async introspectToken(\n    request: IntrospectRequest\n  ): Promise<ApiResponse<IntrospectResponse>> {\n    const response = await apiClient.post(\"/auth/introspect\", request);\n    return response.data;\n  }\n\n  async refreshToken(\n    refreshToken: string\n  ): Promise<ApiResponse<RefreshResponse>> {\n    const response = await apiClient.post(\"/auth/refresh\", { refreshToken });\n    return response.data;\n  }\n\n  async logout(token: string): Promise<ApiResponse<void>> {\n    const response = await apiClient.post(\"/auth/logout\", { token });\n    return response.data;\n  }\n}\n\nclass UserService {\n  async getUsers(\n    page: number = 0,\n    size: number = 12\n  ): Promise<ApiResponse<PagedResponse<UserResponse>>> {\n    const response = await apiClient.get(`/users?page=${page}&size=${size}`);\n    return response.data;\n  }\n\n  async getUserById(userId: string): Promise<ApiResponse<UserResponse>> {\n    const response = await apiClient.get(`/users/${userId}`);\n    return response.data;\n  }\n\n  async updateUser(\n    userId: string,\n    userData: Partial<UserResponse>\n  ): Promise<ApiResponse<UserResponse>> {\n    const response = await apiClient.put(`/users/${userId}`, userData);\n    return response.data;\n  }\n\n  async deleteUser(userId: string): Promise<ApiResponse<void>> {\n    const response = await apiClient.delete(`/users/${userId}`);\n    return response.data;\n  }\n\n  async registerUser(\n    request: RegisterRequest\n  ): Promise<ApiResponse<UserResponse>> {\n    const response = await apiClient.post(\"/users\", request);\n    return response.data;\n  }\n\n  async updateUserById(\n    userId: string,\n    request: UserUpdateRequest\n  ): Promise<ApiResponse<UserResponse>> {\n    const response = await apiClient.put(`/users/${userId}`, request);\n    return response.data;\n  }\n}\n\nclass VideoService {\n  async getVideos(\n    page: number = 0,\n    size: number = 10\n  ): Promise<ApiResponse<PagedResponse<FileResponse>>> {\n    const response = await apiClient.get(`/videos?page=${page}&size=${size}`);\n    return response.data;\n  }\n\n  async getVideosByUserId(\n    userId: string,\n    page: number = 0,\n    size: number = 10\n  ): Promise<ApiResponse<PagedResponse<FileResponse>>> {\n    const response = await apiClient.get(\n      `/videos/user/${userId}?page=${page}&size=${size}`\n    );\n    return response.data;\n  }\n\n  async uploadVideo(\n    file: File,\n    title?: string,\n    description?: string\n  ): Promise<ApiResponse<FileResponse>> {\n    const formData = new FormData();\n    formData.append(\"file\", file);\n    if (title) formData.append(\"title\", title);\n    if (description) formData.append(\"description\", description);\n\n    const response = await apiClient.post(\"/videos/upload\", formData, {\n      headers: {\n        \"Content-Type\": \"multipart/form-data\",\n      },\n    });\n    return response.data;\n  }\n\n  async deleteVideo(videoId: string): Promise<ApiResponse<void>> {\n    const response = await apiClient.delete(`/videos/${videoId}`);\n    return response.data;\n  }\n}\n\nexport const authService = new AuthService();\nexport const userService = new UserService();\nexport const videoService = new VideoService();\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 278, "column": 0}, "map": {"version":3,"sources":["file:///D:/Sturdy/PersonalRepository/TiktokClone/admin-portal/src/hooks/useAuthStore.ts"],"sourcesContent":["import { create } from \"zustand\";\nimport { toast } from \"sonner\";\nimport { authService, userService, UserResponse } from \"@/services/api\";\n\n/**\n * Authentication Store using Zustand for Admin Portal\n * Manages global authentication state\n *\n * @author: TikTok Clone Admin Team\n * @date: 10/25/2025\n */\n\ninterface User {\n  id: string;\n  email: string;\n  username: string;\n  role: \"admin\" | \"moderator\";\n  avatar?: string;\n}\n\ninterface AuthStoreState {\n  user: User | null;\n  accessToken: string | null;\n  loading: boolean;\n  isAuthenticated: boolean;\n  refreshToken: string | null;\n\n  // Actions\n  login: (username: string, password: string) => Promise<boolean>;\n  logout: () => Promise<void>;\n  setAccessToken: (token: string) => void;\n  setRefreshToken: (token: string) => void;\n  setUser: (user: User) => void;\n  clearAuth: () => void;\n}\n\nconst useAuthStore = create<AuthStoreState>((set, get) => ({\n  user: null,\n  accessToken: null,\n  loading: false,\n  isAuthenticated: false,\n  refreshToken: null,\n\n  setUser: (user: User) => {\n    set({ user });\n  },\n\n  setRefreshToken: (token: string) => {\n    set({ refreshToken: token });\n  },\n\n  // Set access token and update axios config\n  setAccessToken: (token: string) => {\n    set({ accessToken: token, isAuthenticated: true });\n  },\n\n  // Clear authentication\n  clearAuth: async () => {\n    set({\n      accessToken: null,\n      isAuthenticated: false,\n      refreshToken: null,\n      user: null,\n    });\n  },\n\n  // Login with username/password\n  login: async (username: string, password: string) => {\n    try {\n      console.log(\"🔐 Login attempt started\", {\n        username,\n        passwordLength: password.length,\n        timestamp: new Date().toISOString(),\n      });\n\n      set({ loading: true });\n\n      const response = await authService.authenticate({ username, password });\n\n      console.log(\"🔐 Login API response\", {\n        code: response.code,\n        hasToken: !!response.result?.token,\n        tokenPreview: response.result?.token\n          ? `${response.result.token.substring(0, 20)}...`\n          : null,\n        expireAt: response.result?.expireAt,\n        timestamp: new Date().toISOString(),\n      });\n\n      if (response.code === 1000 && response.result) {\n        const { token } = response.result;\n\n        set({\n          accessToken: token,\n          isAuthenticated: true,\n          refreshToken: null, // Backend doesn't provide refresh token\n        });\n\n        localStorage.setItem(\"accessToken\", token);\n        // Note: Backend doesn't provide refresh token, so we don't store one\n\n        // Don't set user here - let AuthProvider handle it\n        // This ensures the AuthProvider runs its redirect logic\n        console.log(\n          \"✅ Login successful, token stored. AuthProvider will handle user loading and redirect.\",\n          {\n            tokenPreview: `${token.substring(0, 20)}...`,\n            tokenLength: token.length,\n            timestamp: new Date().toISOString(),\n          }\n        );\n\n        // Force a small delay to ensure localStorage is updated and AuthProvider can detect the change\n        setTimeout(() => {\n          console.log(\n            \"⏰ Login completed, AuthProvider should now detect token and redirect\",\n            {\n              localStorageToken: localStorage.getItem(\"accessToken\")\n                ? `${localStorage.getItem(\"accessToken\")?.substring(0, 20)}...`\n                : null,\n              timestamp: new Date().toISOString(),\n            }\n          );\n\n          // Trigger a custom event to notify AuthProvider of token change\n          window.dispatchEvent(\n            new CustomEvent(\"tokenUpdated\", {\n              detail: { token: token },\n            })\n          );\n        }, 100);\n\n        toast.success(\"Login successful!\");\n        return true;\n      } else {\n        console.error(\"❌ Login failed:\", {\n          code: response.code,\n          message: response.message,\n          timestamp: new Date().toISOString(),\n        });\n        toast.error(response.message || \"Invalid credentials\");\n        return false;\n      }\n    } catch (error: any) {\n      console.error(\"💥 Login error:\", {\n        message: error.message,\n        response: error.response?.data,\n        status: error.response?.status,\n        stack: error.stack,\n        timestamp: new Date().toISOString(),\n      });\n      const errorMessage =\n        error.response?.data?.message || error.message || \"Login failed\";\n      toast.error(errorMessage);\n      return false;\n    } finally {\n      set({ loading: false });\n    }\n  },\n\n  // Logout\n  logout: async () => {\n    try {\n      const { accessToken } = get();\n      if (accessToken) {\n        await authService.logout(accessToken);\n      }\n      localStorage.removeItem(\"accessToken\");\n      localStorage.removeItem(\"refreshToken\");\n      toast.success(\"Logged out successfully!\");\n      get().clearAuth();\n    } catch (error) {\n      console.error(\"Logout error:\", error);\n      toast.error(\"Logout failed!\");\n      get().clearAuth();\n    }\n  },\n}));\n\nexport default useAuthStore;\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 440, "column": 0}, "map": {"version":3,"sources":["file:///D:/Sturdy/PersonalRepository/TiktokClone/admin-portal/src/hooks/AuthProvider.tsx"],"sourcesContent":["\"use client\";\nimport useAuthStore from \"@/hooks/useAuthStore\";\nimport { usePathname, useRouter } from \"next/navigation\";\nimport { useEffect, useState } from \"react\";\nimport { authService, userService } from \"@/services/api\";\n\nexport default function AuthProvider({\n  children,\n}: {\n  children: React.ReactNode;\n}) {\n  const router = useRouter();\n  const pathname = usePathname();\n  const { clearAuth, setAccessToken, setUser, user, setRefreshToken } =\n    useAuthStore();\n  const [tokens, setTokens] = useState<{\n    accessToken: string;\n    refreshToken: string;\n  } | null>(null);\n\n  useEffect(() => {\n    if (typeof window !== \"undefined\") {\n      const accessTokenFromLocal = localStorage.getItem(\"accessToken\") || \"\";\n      const refreshTokenFromLocal = localStorage.getItem(\"refreshToken\") || \"\";\n\n      console.log(\"🔄 AuthProvider: Loading tokens from localStorage\", {\n        accessToken: accessTokenFromLocal\n          ? `${accessTokenFromLocal.substring(0, 20)}...`\n          : null,\n        refreshToken: refreshTokenFromLocal\n          ? `${refreshTokenFromLocal.substring(0, 20)}...`\n          : null,\n        timestamp: new Date().toISOString(),\n      });\n\n      setAccessToken(accessTokenFromLocal);\n      setRefreshToken(refreshTokenFromLocal);\n      setTokens({\n        accessToken: accessTokenFromLocal,\n        refreshToken: refreshTokenFromLocal,\n      });\n    }\n  }, [setAccessToken, setRefreshToken]);\n\n  // Listen for token updates from login store\n  useEffect(() => {\n    const handleTokenUpdate = (e: CustomEvent) => {\n      const newToken = e.detail?.token;\n      if (newToken) {\n        console.log(\"🔄 AuthProvider: Token updated via custom event\", {\n          newToken: newToken ? `${newToken.substring(0, 20)}...` : null,\n          timestamp: new Date().toISOString(),\n        });\n\n        setAccessToken(newToken);\n        setTokens((prev) => ({\n          accessToken: newToken,\n          refreshToken: prev?.refreshToken || \"\",\n        }));\n      }\n    };\n\n    window.addEventListener(\"tokenUpdated\", handleTokenUpdate as EventListener);\n\n    return () => {\n      window.removeEventListener(\n        \"tokenUpdated\",\n        handleTokenUpdate as EventListener\n      );\n    };\n  }, [setAccessToken]);\n\n  useEffect(() => {\n    console.log(\"🔐 AuthProvider useEffect triggered\", {\n      hasToken: !!tokens?.accessToken,\n      tokenLength: tokens?.accessToken?.length || 0,\n      currentUser: user,\n      pathname,\n      tokens: tokens\n        ? {\n            accessToken: tokens.accessToken\n              ? `${tokens.accessToken.substring(0, 20)}...`\n              : null,\n            refreshToken: tokens.refreshToken\n              ? `${tokens.refreshToken.substring(0, 20)}...`\n              : null,\n          }\n        : null,\n      localStorage: {\n        accessToken: localStorage.getItem(\"accessToken\")\n          ? `${localStorage.getItem(\"accessToken\")?.substring(0, 20)}...`\n          : null,\n        refreshToken: localStorage.getItem(\"refreshToken\")\n          ? `${localStorage.getItem(\"refreshToken\")?.substring(0, 20)}...`\n          : null,\n      },\n    });\n\n    const fetchUser = async () => {\n      // Don't fetch if user is already loaded or no token\n      if (user !== null || !tokens?.accessToken) {\n        console.log(\"⏭️ AuthProvider: Skipping fetchUser\", {\n          user: user\n            ? {\n                id: user.id,\n                username: user.username,\n                role: user.role,\n              }\n            : null,\n          hasToken: !!tokens?.accessToken,\n          reason: user !== null ? \"User already loaded\" : \"No access token\",\n        });\n        return;\n      }\n\n      console.log(\"🔍 AuthProvider: Starting token validation\", {\n        hasToken: !!tokens?.accessToken,\n        tokenPreview: tokens?.accessToken\n          ? `${tokens.accessToken.substring(0, 20)}...`\n          : null,\n        currentUser: user,\n        pathname,\n        timestamp: new Date().toISOString(),\n      });\n\n      try {\n        // Validate token\n        const introspectResponse = await authService.introspectToken({\n          token: tokens.accessToken,\n        });\n\n        console.log(\"✅ AuthProvider: Token introspection result\", {\n          code: introspectResponse.code,\n          isValid: introspectResponse.result?.isValid,\n          userId: introspectResponse.result?.userId,\n          fullResponse: introspectResponse,\n          resultType: typeof introspectResponse.result?.isValid,\n          resultValue: introspectResponse.result?.isValid,\n        });\n\n        if (\n          introspectResponse.code === 1000 &&\n          (introspectResponse.result?.isValid === true ||\n            introspectResponse.result?.userId)\n        ) {\n          // Get user details using userId from token introspection\n          const userId = introspectResponse.result.userId;\n          if (!userId) {\n            console.log(\"AuthProvider: No userId in token, clearing auth\");\n            localStorage.setItem(\"accessToken\", \"\");\n            localStorage.setItem(\"refreshToken\", \"\");\n            clearAuth();\n            if (pathname.startsWith(\"/admin\")) {\n              router.replace(\"/login\");\n            }\n            return;\n          }\n\n          const userResponse = await userService.getUserById(userId);\n\n          console.log(\"👤 AuthProvider: User fetch result\", {\n            code: userResponse.code,\n            hasUser: !!userResponse.result,\n            userData: userResponse.result\n              ? {\n                  id: userResponse.result.id,\n                  username: userResponse.result.username,\n                  mail: userResponse.result.mail,\n                  roles: userResponse.result.roles?.map((r) => r.name),\n                }\n              : null,\n            fullResponse: userResponse,\n          });\n\n          if (userResponse.code === 1000 && userResponse.result) {\n            const userData = userResponse.result;\n\n            // Check if user account is enabled\n            if (userData.enable === false) {\n              console.log(\n                \"🚫 AuthProvider: User account is disabled, clearing auth\",\n                {\n                  userId: userData.id,\n                  username: userData.username,\n                  enable: userData.enable,\n                  timestamp: new Date().toISOString(),\n                }\n              );\n              localStorage.setItem(\"accessToken\", \"\");\n              localStorage.setItem(\"refreshToken\", \"\");\n              clearAuth();\n              if (pathname.startsWith(\"/admin\")) {\n                router.replace(\"/login\");\n              }\n              return;\n            }\n\n            const user = {\n              id: userData.id,\n              email: userData.mail,\n              username: userData.username,\n              role: userData.roles?.some((role) => role.name === \"ADMIN\")\n                ? (\"admin\" as const)\n                : (\"moderator\" as const),\n              avatar: undefined,\n            };\n            setUser(user);\n\n            console.log(\"🎉 AuthProvider: User set successfully\", {\n              user: {\n                id: user.id,\n                username: user.username,\n                email: user.email,\n                role: user.role,\n              },\n              timestamp: new Date().toISOString(),\n            });\n\n            // If on login page and successfully authenticated, redirect to dashboard\n            if (pathname === \"/login\") {\n              console.log(\n                \"🚀 AuthProvider: Redirecting from login to dashboard\",\n                {\n                  from: pathname,\n                  to: \"/admin/dashboard\",\n                  timestamp: new Date().toISOString(),\n                }\n              );\n              router.replace(\"/admin/dashboard\");\n            }\n          } else {\n            // User fetch failed, clear auth\n            console.log(\"❌ AuthProvider: User fetch failed, clearing auth\", {\n              code: userResponse.code,\n              message: userResponse.message,\n              timestamp: new Date().toISOString(),\n            });\n            localStorage.setItem(\"accessToken\", \"\");\n            localStorage.setItem(\"refreshToken\", \"\");\n            clearAuth();\n            if (pathname.startsWith(\"/admin\")) {\n              router.replace(\"/login\");\n            }\n          }\n        } else {\n          // Invalid token, clear auth\n          console.log(\"🚫 AuthProvider: Invalid token, clearing auth\", {\n            code: introspectResponse.code,\n            isValid: introspectResponse.result?.isValid,\n            timestamp: new Date().toISOString(),\n          });\n          localStorage.setItem(\"accessToken\", \"\");\n          localStorage.setItem(\"refreshToken\", \"\");\n          clearAuth();\n          if (pathname.startsWith(\"/admin\")) {\n            router.replace(\"/login\");\n            return;\n          }\n        }\n      } catch (error: unknown) {\n        const errorObj = error as {\n          message?: string;\n          response?: {\n            data?: unknown;\n            status?: number;\n          };\n          config?: {\n            url?: string;\n          };\n          stack?: string;\n        };\n        console.error(\"💥 AuthProvider: Auth validation error:\", {\n          message: errorObj.message,\n          response: errorObj.response?.data,\n          status: errorObj.response?.status,\n          url: errorObj.config?.url,\n          timestamp: new Date().toISOString(),\n          stack: errorObj.stack,\n        });\n\n        // Only clear auth and redirect if we're not on the login page\n        // This prevents the redirect loop when login is successful\n        if (pathname !== \"/login\") {\n          localStorage.setItem(\"accessToken\", \"\");\n          localStorage.setItem(\"refreshToken\", \"\");\n          clearAuth();\n          if (pathname.startsWith(\"/admin\")) {\n            router.replace(\"/login\");\n            return;\n          }\n        }\n      }\n    };\n\n    // Check if we need to redirect from login page when user is already set\n    if (user !== null && pathname === \"/login\") {\n      console.log(\n        \"🔄 AuthProvider: User already set, redirecting from login to dashboard\",\n        {\n          user: {\n            id: user.id,\n            username: user.username,\n            role: user.role,\n          },\n          from: pathname,\n          to: \"/admin/dashboard\",\n          timestamp: new Date().toISOString(),\n        }\n      );\n      router.replace(\"/admin/dashboard\");\n      return;\n    }\n\n    // If user is authenticated and trying to access admin routes, allow it\n    if (user !== null && pathname.startsWith(\"/admin\")) {\n      console.log(\n        \"✅ AuthProvider: User authenticated, allowing access to admin routes\",\n        {\n          user: {\n            id: user.id,\n            username: user.username,\n            role: user.role,\n          },\n          pathname,\n          timestamp: new Date().toISOString(),\n        }\n      );\n      return;\n    }\n\n    // Only run validation if we have a token and no user yet\n    if (tokens?.accessToken && user === null) {\n      console.log(\"🔄 AuthProvider: Running fetchUser\", {\n        hasToken: !!tokens?.accessToken,\n        user: user,\n        pathname,\n        timestamp: new Date().toISOString(),\n      });\n      fetchUser();\n    } else if (!tokens?.accessToken && pathname.startsWith(\"/admin\")) {\n      // No token and trying to access admin routes\n      console.log(\"🚫 AuthProvider: No token, redirecting to login\", {\n        hasToken: !!tokens?.accessToken,\n        pathname,\n        timestamp: new Date().toISOString(),\n      });\n      router.replace(\"/login\");\n    }\n  }, [\n    router,\n    pathname,\n    clearAuth,\n    setAccessToken,\n    setUser,\n    user,\n    tokens,\n    setRefreshToken,\n  ]);\n\n  return <>{children}</>;\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 724, "column": 0}, "map": {"version":3,"sources":["file:///D:/Sturdy/PersonalRepository/TiktokClone/admin-portal/src/hooks/QueryProvider.tsx"],"sourcesContent":["\"use client\";\r\n\r\nimport { QueryClient, QueryClientProvider } from \"@tanstack/react-query\";\r\nimport { useState } from \"react\";\r\nimport { ReactQueryDevtools } from \"@tanstack/react-query-devtools\";\r\n\r\nexport function QueryProvider({ children }: { children: React.ReactNode }) {\r\n  const [queryClient] = useState(\r\n    () =>\r\n      new QueryClient({\r\n        defaultOptions: {\r\n          queries: {\r\n            staleTime: 5 * 60 * 1000, // 5 minutes\r\n            retry: 2,\r\n            refetchOnWindowFocus: false,\r\n          },\r\n          mutations: {\r\n            retry: 1,\r\n          },\r\n        },\r\n      })\r\n  );\r\n\r\n  return (\r\n    <QueryClientProvider client={queryClient}>\r\n      {children}\r\n      <ReactQueryDevtools initialIsOpen={false} />\r\n    </QueryClientProvider>\r\n  );\r\n}\r\n"],"names":[],"mappings":";;;;;AAEA;AAAA;AACA;AACA;AAJA;;;;;AAMO,SAAS,cAAc,EAAE,QAAQ,EAAiC;IACvE,MAAM,CAAC,YAAY,GAAG,IAAA,iNAAQ,EAC5B,IACE,IAAI,4LAAW,CAAC;YACd,gBAAgB;gBACd,SAAS;oBACP,WAAW,IAAI,KAAK;oBACpB,OAAO;oBACP,sBAAsB;gBACxB;gBACA,WAAW;oBACT,OAAO;gBACT;YACF;QACF;IAGJ,qBACE,8OAAC,6MAAmB;QAAC,QAAQ;;YAC1B;0BACD,8OAAC,0MAAkB;gBAAC,eAAe;;;;;;;;;;;;AAGzC","debugId":null}}]
}